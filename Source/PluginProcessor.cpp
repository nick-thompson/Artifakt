/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "ArtifaktVoice.h"
#include "ArtifaktSound.h"
#include "Oscillator.h"

//==============================================================================
ArtifaktAudioProcessor::ArtifaktAudioProcessor()
{
    Wavetable::init();

    m_topWaveformTypeParam =
        new AudioParameterFloat("topWaveType", "Top Osc Waveform Type",
                                0.0f, 3.0f, 0.0f);

    m_topDetuneParam =
        new AudioParameterInt("topDetuneAmount", "Top Osc Detune Amount",
                              -48, 48, 0);

    m_topDistortionParam =
        new AudioParameterFloat("topDistAmount", "Top Osc Distortion Amount",
                                0.0f, 1.0f, 0.0f);

    m_bottomWaveformTypeParam =
        new AudioParameterFloat("bottomWaveType", "Bottom Osc Waveform Type",
                                0.0f, 3.0f, 0.0f);

    m_bottomDetuneParam =
        new AudioParameterInt("bottomDetuneAmount", "Bottom Osc Detune Amount",
                              -48, 48, 0);

    m_bottomDistortionParam =
        new AudioParameterFloat("bottomDistAmount", "Bottom Osc Distortion Amount",
                                0.0f, 1.0f, 0.0f);

    addParameter(m_topWaveformTypeParam);
    addParameter(m_topDetuneParam);
    addParameter(m_topDistortionParam);
    addParameter(m_bottomWaveformTypeParam);
    addParameter(m_bottomDetuneParam);
    addParameter(m_bottomDistortionParam);

    m_synth.addSound(new ArtifaktSound());

    for (int i = 4; --i >=0;)
    {
        Oscillator* top = new Oscillator(m_topDetuneParam, m_topWaveformTypeParam);
        Oscillator* bottom = new Oscillator(m_bottomDetuneParam, m_bottomWaveformTypeParam);
        m_synth.addVoice(new ArtifaktVoice(top, bottom));
    }
}

ArtifaktAudioProcessor::~ArtifaktAudioProcessor()
{
}

//==============================================================================
const String ArtifaktAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

const String ArtifaktAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String ArtifaktAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool ArtifaktAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool ArtifaktAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool ArtifaktAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool ArtifaktAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool ArtifaktAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double ArtifaktAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int ArtifaktAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int ArtifaktAudioProcessor::getCurrentProgram()
{
    return 0;
}

void ArtifaktAudioProcessor::setCurrentProgram (int index)
{
}

const String ArtifaktAudioProcessor::getProgramName (int index)
{
    return String();
}

void ArtifaktAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void ArtifaktAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    m_synth.setCurrentPlaybackSampleRate(sampleRate);
}

void ArtifaktAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void ArtifaktAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // Render the synthesiser output into the output buffer.
    m_synth.renderNextBlock(buffer, midiMessages, 0, buffer.getNumSamples());
}

//==============================================================================
bool ArtifaktAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* ArtifaktAudioProcessor::createEditor()
{
    return new ArtifaktAudioProcessorEditor (*this);
}

//==============================================================================
void ArtifaktAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void ArtifaktAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new ArtifaktAudioProcessor();
}
